import java.util.Arrays;

public class MatrixValidation
{
   public static void main(String[] args)
   {
      int[][] matrix = {{1,2,3}, {2,3,1}, {3,1,2}};
      boolean valid;

      MatrixTraversal(matrix);
      valid = CheckMatrix(matrix);
      System.out.println("Matrix check result: " + valid);
   }

   private static void MatrixTraversal(int[][] matrix)
   {
      System.out.print("Matrix: [");

      for (int i = 0; i < matrix.length; i++){
		  System.out.print("{");

		  for (int j = 0; j < matrix[i].length; j++){
			  System.out.print(matrix[i][j]);
			  if (j < (matrix[i].length - 1)) System.out.print(", ");
		  }

		  if (i < (matrix.length - 1)) System.out.print("}, ");
	  }

	  System.out.println("}]");
   }

   // CheckMatrix using Binary Search method
   private static boolean CheckMatrix(int[][] matrix)
   {
	   boolean valid = true;
	   int i = 0;
	   int j = 0;
	   int[] numbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

	   while (valid && (i < matrix.length)){
		   int toCheckValue = matrix[i][j];
		   int res = Arrays.binarySearch(numbers, toCheckValue);
		   valid = res >= 0 ? true : false;

		   //System.out.println("Matrix[" + i + "," + j + "]: " + toCheckValue + " " + valid);

		   j++;
		   if (j >= matrix[i].length){
			   j = 0;
			   i++;
		   }
	   }

	   return valid;
   }

   // CheckMatrix using List.contains() method
   /*
   private static boolean CheckMatrix(int[][] matrix)
   {
   	   boolean valid = true;
   	   int i = 0;
   	   int j = 0;
   	   Integer[] numbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

   	   while (valid && (i < matrix.length)){
   		   int toCheckValue = matrix[i][j];
   		   valid = Arrays.asList(numbers).contains(toCheckValue);

   		   //System.out.println("Matrix[" + i + "," + j + "]: " + toCheckValue + " " + valid);

   		   j++;
   		   if (j >= matrix[i].length){
   			   j = 0;
   			   i++;
   		   }
   	   }

   	   return valid;
   }
   */
}
